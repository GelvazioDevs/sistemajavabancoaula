package aula;

import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Senac
 */
public class consultaPessoa extends javax.swing.JFrame {

    private int codigo;
    private String nome;
    private String endereco;
    private String cpf;
    
    /**
     * Creates new form consultaPessoa
     */
    public consultaPessoa() {
        initComponents();
        // Centraliza a tela
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botaoFiltrarTodos = new javax.swing.JRadioButton();
        comboboxFiltro = new javax.swing.JComboBox<>();
        edtPesquisa = new javax.swing.JTextField();
        btnConsultar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaConsultaPessoas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        botaoFiltrarTodos.setText("FiltrarTodos");

        comboboxFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Código", "Nome", "Endereço", "CPF" }));

        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        tabelaConsultaPessoas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Código", "Nome", "Endereço", "CPF"
            }
        ));
        jScrollPane1.setViewportView(tabelaConsultaPessoas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboboxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoFiltrarTodos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConsultar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botaoFiltrarTodos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboboxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultar))
                .addContainerGap(406, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(65, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(18, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        int selecionado = 0;
        if (botaoFiltrarTodos.isSelected()) {
            selecionado = 999;
            edtPesquisa.setText("");
        } else if (edtPesquisa.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(null, "Informe um valor para pesquisa!");
        } else {
            selecionado = comboboxFiltro.getSelectedIndex();            
        }

        try {
            ArrayList<Pessoa> listaPessoas = getAllPessoas(selecionado);
            int totalRegistros = listaPessoas.size();
            if (totalRegistros == 0) {
                JOptionPane.showMessageDialog(null, "Pessoa não encontrada para filtro selecionado!");
            } else {
                try {
                    atualizaTabelaPessoas(selecionado);
                } catch (IOException ex) {
                    Logger.getLogger(consultaProdutosProfessor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(consultaProdutosProfessor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(consultaPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(consultaPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(consultaPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(consultaPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new consultaPessoa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton botaoFiltrarTodos;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JComboBox<String> comboboxFiltro;
    private javax.swing.JTextField edtPesquisa;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaConsultaPessoas;
    // End of variables declaration//GEN-END:variables

    private ArrayList<Pessoa> getAllPessoas(int selecionado) throws IOException {
        String sql = "select * from pessoa order by codigo";

//        -- SELECIONADOS = ARRAY QUE COMECA EM ZERO
//        --   0-ok    1      2       3
//        -- Código, Nome, Endereço, CPF
        
        // CODIGO SELECIONADO
        if (selecionado == 0) {
            codigo = Integer.parseInt(edtPesquisa.getText());
            sql = "select * from pessoa WHERE codigo = " + codigo + " order by codigo";
        } else if (selecionado == 1) {
            nome = edtPesquisa.getText();
            sql = "select * from pessoa WHERE nome ilike '%" + nome + "%' order by codigo";
        } else if (selecionado == 2) {
            endereco = edtPesquisa.getText();
            sql = "select * from pessoa WHERE endereco ilike '%" + endereco + "%' order by codigo";
        } else if (selecionado == 3) {
            cpf = edtPesquisa.getText();
            sql = "select * from pessoa WHERE cpf ilike '%" + cpf + "%' order by codigo";
        }

        Pessoa pessoa = new Pessoa();
        // Contar a quantidade de registros
        return Conexao.executaQuery(sql, pessoa);
    }

    private void atualizaTabelaPessoas(int selecionado)throws IOException {
        DefaultTableModel model = (DefaultTableModel) tabelaConsultaPessoas.getModel();
        
        // Limpa a tabela
        model.setNumRows(0);
        model.setRowCount(0);

        ArrayList<Pessoa> listaPessoas = getAllPessoas(selecionado);
        System.out.println("-----------------------------");       
        for (Pessoa auxPessoa : listaPessoas) {
            System.out.println("Codigo:" + auxPessoa.getCodigo());
            System.out.println("Nome:" + auxPessoa.getNome());
            System.out.println("Endereço:" + auxPessoa.getEndereco());
            System.out.println("CPF:" + auxPessoa.getCpf());
            System.out.println("-----------------------------");       
                        
            // acima igual antes
            model.addRow(new Object[]{
                auxPessoa.getCodigo(),
                auxPessoa.getNome(),
                auxPessoa.getEndereco(),
                auxPessoa.getCpf()
            });
        }        
    }
}
